nextflow_process {

    name "Test Process EDTA_EDTA"
    script "../main.nf"
    process "EDTA_EDTA"
    config "./nextflow.config"

    tag "modules"
    tag "modules_gallvp"
    tag "edta"
    tag "edta/edta"
    tag "modules/nf-core/gunzip"

    test("actinidia_chinensis-genome_1_fasta_gz") {

        setup {
            run("GUNZIP") {
                script "../../../../../modules/nf-core/gunzip"

                process {
                    """
                    input[0] = [
                    [ id:'test' ],
                    file(params.test_data['actinidia_chinensis']['genome']['genome_1_fasta_gz'], checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0]    = GUNZIP.out.gunzip
                input[1]    = []
                input[2]    = []
                input[3]    = []
                input[4]    = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
                { assert path(process.out.te_lib_fasta[0][1]).text.contains('LTR/Copia') },
                { assert path(process.out.pass_list[0][1]).text.contains('Copia') },
                { assert process.out.out_file == [] },
                { assert process.out.te_anno_gff3 == [] }
            )
        }

    }

    test("stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}