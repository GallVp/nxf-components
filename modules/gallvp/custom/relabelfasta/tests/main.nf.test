nextflow_process {

    name "Test Process CUSTOM_RELABELFASTA"
    script "../main.nf"
    process "CUSTOM_RELABELFASTA"

    tag "modules"
    tag "modules_gallvp"
    tag "custom"
    tag "custom/relabelfasta"

    test("sarscov2 - fasta") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\tChr1').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }

            )
        }

    }

    test("sarscov2 - fasta - repeated labels") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\\tChr1\\nMT19276\\tChr1').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert ! process.success },
                { assert process.stdout.toString().contains('Each sequence label should be unique') }

            )
        }

    }

    test("sarscov2 - fasta - repeated ids") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\\tChr1\\nMT192765.1\\tChr1').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert ! process.success },
                { assert process.stdout.toString().contains('Each sequence ID should be unique') }

            )
        }

    }

    test("sarscov2 - fasta - malformed") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\\tChr1\\nMT192765.1').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert ! process.success },
                { assert process.stdout.toString().contains('should be a two column TSV file') }

            )
        }

    }

    test("sarscov2 - fasta - missing ids") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\\tChr1\\nMT192765.2\\tChr2').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert ! process.success },
                { assert process.stdout.toString().contains('missing from the fasta') }

            )
        }

    }

    test("sarscov2 - fasta - stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = Channel.of('MT192765.1\tChr1').collectFile(name: 'id_map.tsv', newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }

            )
        }

    }

}
