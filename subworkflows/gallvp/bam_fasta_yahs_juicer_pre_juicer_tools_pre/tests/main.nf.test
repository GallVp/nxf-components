nextflow_workflow {

    name "Test Subworkflow BAM_FASTA_YAHS_JUICER_PRE_JUICER_TOOLS_PRE"
    script "../main.nf"
    config "./nextflow.config"
    workflow "BAM_FASTA_YAHS_JUICER_PRE_JUICER_TOOLS_PRE"

    tag "subworkflows"
    tag "subworkflows_gallvp"
    tag "subworkflows/bam_fasta_yahs_juicer_pre_juicer_tools_pre"
    tag "samtools"
    tag "samtools/faidx"
    tag "yahs/juicerpre"
    tag "gunzip"
    tag "juiceboxscripts/makeagpfromfasta"
    tag "juicertools/pre"
    tag "sort"

    setup {
        run("GUNZIP") {
            script "../../../../modules/gallvp/gunzip/main.nf"

            process {
                """
                input[0] = Channel.of([
                    [ id:'genome' ],
                    file('https://github.com/Plant-Food-Research-Open/assemblyqc/raw/4f9fba392cf7212d61c6245fd72339e09164ce44/tests/hic/testdata/HYh1h2_Chr01_6000000_6015000.fasta.gz', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("hongyang - bam - fasta") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', ref_id:'genome' ],
                    file('https://github.com/Plant-Food-Research-Open/assemblyqc/raw/4f9fba392cf7212d61c6245fd72339e09164ce44/tests/hic/testdata/HYh1h2_Chr01_6000000_6015000.bam', checkIfExists: true)
                ])
                input[1] = GUNZIP.out.gunzip
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}